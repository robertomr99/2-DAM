package unico;

public class Principal {

    public static void main(String[] args) {
        final int nSillas = 3;
        final int nClientes = 5;

        Barberia barberia = new Barberia(nSillas);
        Barbero barbero  = new Barbero(barberia);
        Cliente[] clientes = new Cliente [10];

        barbero.start();

        for (int i = 0; i < nClientes; i++) {
            clientes[i] = new Cliente(barberia, i);
            clientes[i].start();
        }
    }

}
------------------------------------------------------------------------
package unico;

public class Barbero extends Thread{

    private Barberia barberia;

    public Barbero(Barberia barberia) {
        this.barberia = barberia;
    }

    public void run() {
        while (true) {
            try {
                barberia.esperarCliente();
                // Cortar pelo
                Thread.sleep(5000);
                barberia.acabarCorte();
                // Decansa un poco
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
            ;
        }
    }
}
---------------------------------------------------------
package unico;

public class Barberia {

    private int nSillasEspera;
    private int nSillasEsperaOcupadas = 0;
    private boolean sillaBarberoOcupada = false;
    private boolean finCorte = false;
    private boolean barberoDormido = false;

    public Barberia(int nSillasEspera) {
        this.nSillasEspera = nSillasEspera;
    }

    public synchronized boolean entrar(int clienteId)
            throws InterruptedException {
        if (nSillasEsperaOcupadas == nSillasEspera) {
            // Si no hay sillas libres, me voy sin cortar el pelo
            System.out.println("El cliente " + clienteId + " se va sin cortarse el pelo");
            return false;
        } else {
            // Me quedo esperando si la silla del barbero está
            // ocupada
            nSillasEsperaOcupadas++;
            System.out.println("El cliente " + clienteId + " se sienta en la silla de espera");
            while (sillaBarberoOcupada) {
                wait();
            }

            // Desocupo la silla de espera
            nSillasEsperaOcupadas--;
// Me siento en la silla del barbero
            sillaBarberoOcupada = true;
            finCorte = false;

            // Si el barbero está dormido le despierto
            if (barberoDormido) {
                System.out.println("El cliente " + clienteId + " despierta al barbero");
                notifyAll();
            }

            // Espero a que me corte el pelo
            System.out.println("El cliente " + clienteId + " en la silla de barbero");
            while (!finCorte) {
                wait();
            }

            sillaBarberoOcupada = false;

            // Que pase el siguiente
            notifyAll();

            System.out.println("El cliente " + clienteId + " se va con el pelo cortado");
            return true;
        }
    }

    public synchronized void esperarCliente() throws InterruptedException {
        // El barbero espera a que llegue un cliente
        // Se supone que le corta el pelo fuera del
        // monitor
        barberoDormido = true;
        while (!sillaBarberoOcupada) {
            System.out.println("--Barbero esperando cliente--");
            wait();
        }
        barberoDormido = false;
        System.out.println("--Barbero cortando el pelo--");
    }

    public synchronized void acabarCorte() {
        finCorte = true;
        System.out.println("--Barbero termina de cortar el pelo--");
        notifyAll();
    }

}
----------------------------------------------------------------------
package unico;

public class Cliente extends Thread {

    private Barberia barberia;
    private int clienteId;
    private boolean cortePelo = false;

    public Cliente(Barberia barberia, int clienteId) {
        this.barberia = barberia;
        this.clienteId = clienteId;
    }

    public void run() {
        while (true) {
            try {
                Thread.sleep(2000);
                cortePelo = barberia.entrar(clienteId);
                // Cortar pelo
                if (cortePelo) {
                    // Espero hasta que me crezca el pelo
                    Thread.sleep(25000);
                } else {
                    // Espero y lo vuelvo a intentar
                    Thread.sleep(4000);
                }
            } catch (InterruptedException e) {
            }
            ;
        }
    }
}
